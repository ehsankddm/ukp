package de.tudarmstadt.ukp.experiments.ek.de.tudarmstadt.ukp.experiments.ek.ubyfeat.extraction;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import de.tudarmstadt.ukp.lmf.exceptions.UbyInvalidArgumentException;
import de.tudarmstadt.ukp.lmf.model.core.LexicalEntry;
import de.tudarmstadt.ukp.lmf.model.core.Lexicon;
import de.tudarmstadt.ukp.lmf.model.core.Sense;
import de.tudarmstadt.ukp.lmf.model.enums.EPartOfSpeech;
import de.tudarmstadt.ukp.lmf.model.semantics.Synset;
import de.tudarmstadt.ukp.lmf.model.semantics.SynsetRelation;
import de.tudarmstadt.ukp.lmf.transform.DBConfig;

public class SynsetRelationExtraction
    extends UbyRelationExtraction
{
    private final Log log = LogFactory.getLog(SynsetRelationExtraction.class);

    public SynsetRelationExtraction(DBConfig db)
        throws Exception
    {
        super(db);
        super.statisticsExtractor = new StatisticsExtractor("WN_Sense_Feat.stat");

    }

    @Override
    public void dumpRelations(PrintWriter writer)
    {
        String lexiconName = "WordNet";
        Lexicon lex;
        List<Triple> triples;
        try {
            lex = uby.getLexiconByName(lexiconName);
            for (EPartOfSpeech pos : POSList) {
                Iterator<LexicalEntry> lexicalEntryIterator = uby.getLexicalEntryIterator(pos, lex);
                while (lexicalEntryIterator.hasNext()) {
                    LexicalEntry lexicalEntry = lexicalEntryIterator.next();
                    String lemma = lexicalEntry.getLemmaForm();
                    log.info(lexicalEntry);

                    for (Synset synset : lexicalEntry.getSynsets()) {
//                        log.info(synset);
//                        triples=getSynsetRelations(synset, lemma, pos, lexiconName);
                        triples=getWordNetSenseRelations(synset, lemma, pos, lexiconName);
                        for (Triple triple : triples) {
                            /* for (String rel : triple.generalizeTriple()) {
                                 writer.println(rel);
                             }*/
                             writer.println(triple);
//                             log.info(triple);
                         }
                         writer.flush();
                         this.statisticsExtractor.addData(triples);

                    }
                }
                String message = pos + ":";
                this.statisticsExtractor.dumpStatistics(message);
            }

        }
        catch (UbyInvalidArgumentException e) {

            e.printStackTrace();
        }

    }

    @Override
    public void dumpRelationsStatistics(PrintWriter writer)
    {


    }

    private List<Triple> getSynsetRelations(Synset synset, String lemma, EPartOfSpeech pos,
            String lexName)
    {
        List<Triple> srList = new ArrayList<Triple>();
        for (SynsetRelation synsetRelation : synset.getSynsetRelations()) {
            synsetRelation.getFrequencies();
            if (synsetRelation.getSource() == null || synsetRelation.getSource().getId() == null
                    || synsetRelation.getTarget() == null
                    || synsetRelation.getTarget().getId() == null) {
                continue;
            }

            // String targetID = synsetRelation.getTarget().getId();

            Entity leftHandSide = new Entity(synsetRelation.getSource().getId(),
                    EntityTypes.SYNSET, lemma, pos, lexName);
            String targetLemma = null;
            // Be careful about this POS
            if (synsetRelation.getTarget().getSenses().size() > 0) {
                targetLemma = synsetRelation.getTarget().getSenses().get(0).getLexicalEntry()
                        .getLemmaForm();

            }
            System.out.println(synsetRelation.getRelType().name() + ":"
                    + synsetRelation.getRelName());

            Entity rightHandSide = new Entity(synsetRelation.getTarget().getId(),
                    EntityTypes.SYNSET, targetLemma, pos, lexName);

            Relation relation = new Relation(synsetRelation.getRelType().name(),
                    synsetRelation.getRelName());

            Triple temp = new Triple(leftHandSide, rightHandSide, relation);

            // System.out.println(temp);
            // log.info(temp);
            srList.add(temp);

        }

        return srList;

    }

    private List<Triple> getWordNetSenseRelations(Synset synset, String lemma, EPartOfSpeech pos,
            String lexName)
    {
        List<Triple> srList = new ArrayList<Triple>();
        for (SynsetRelation synsetRelation : synset.getSynsetRelations()) {
            synsetRelation.getFrequencies();
            if (synsetRelation.getSource() == null || synsetRelation.getSource().getId() == null
                    || synsetRelation.getTarget() == null
                    || synsetRelation.getTarget().getId() == null) {
                log.info("something is null, be careful about this sense: " + synset
                        + "\n source: " + synsetRelation.getSource() + "\n target:"
                        + synsetRelation.getTarget());
                continue;
            }

            // String targetID = synsetRelation.getTarget().getId();

            Triple temp;
            for (Sense sourceSense : synsetRelation.getSource().getSenses()) {
                for (Sense targetSense : synsetRelation.getTarget().getSenses()) {

                    String sourceLemma = sourceSense.getLexicalEntry().getLemmaForm();
                    String targetLemma = targetSense.getLexicalEntry().getLemmaForm();

                    // System.out.println(synsetRelation.getRelType().name()+":"+synsetRelation.getRelName());

                    if (!pos.equals(sourceSense.getLexicalEntry().getPartOfSpeech())) {
                        log.info("\n\n\nMother Fucker POSSSSSSSSSSSSSSSSSSSSSSSSSSS\n\n\n\n\n");
                    }
                    // Be careful about this POS
                    Entity leftHandSide = new Entity(sourceSense.getId(), EntityTypes.SENSE,
                            sourceLemma, pos, lexName);

                    Entity rightHandSide = new Entity(targetSense.getId(), EntityTypes.SYNSET,
                            targetLemma, targetSense.getLexicalEntry().getPartOfSpeech(), lexName);

                    Relation relation = new Relation(synsetRelation.getRelType().name(),
                            synsetRelation.getRelName());

                    temp = new Triple(leftHandSide, rightHandSide, relation);

                    // System.out.println(temp);
                    // log.info(temp);
                    srList.add(temp);

                }

            }

        }

        return srList;

    }

    /**
     * @param args
     * @throws Exception
     */
    public static void main(String[] args)
        throws Exception
    {
        DBConfig db = new DBConfig("localhost/uby_academic", "com.mysql.jdbc.Driver", "mysql",
                "root", "ehsanukp", false);
        SynsetRelationExtraction relExtractor = new SynsetRelationExtraction(db);

        PrintWriter writer = null;
        try {
            writer = new PrintWriter("./WN_Sense_Feat.output");
            relExtractor.dumpRelations(writer);
        }
        catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        finally {
            writer.close();
        }

    }
}
