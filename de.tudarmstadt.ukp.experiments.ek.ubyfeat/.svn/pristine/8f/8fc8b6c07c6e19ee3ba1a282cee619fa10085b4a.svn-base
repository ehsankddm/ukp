/**
 *
 */
package de.tudarmstadt.ukp.experiments.ek.de.tudarmstadt.ukp.experiments.ek.ubyfeat.extraction;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import de.tudarmstadt.ukp.lmf.exceptions.UbyInvalidArgumentException;
import de.tudarmstadt.ukp.lmf.model.core.LexicalEntry;
import de.tudarmstadt.ukp.lmf.model.core.Lexicon;
import de.tudarmstadt.ukp.lmf.model.core.Sense;
import de.tudarmstadt.ukp.lmf.model.enums.EPartOfSpeech;
import de.tudarmstadt.ukp.lmf.model.multilingual.SenseAxis;
import de.tudarmstadt.ukp.lmf.transform.DBConfig;

/**
 * @author khoddam
 *
 */
public class SenseAxisRelationExtraction
    extends UbyRelationExtraction
{

    private final Log log = LogFactory.getLog(SenseAxisRelationExtraction.class);

    /**
     * @param db
     * @throws UbyInvalidArgumentException
     */
    public SenseAxisRelationExtraction(DBConfig db)
        throws UbyInvalidArgumentException
    {
        super(db);
        // TODO Auto-generated constructor stub
    }

    /*
     * (non-Javadoc)
     *
     * @see de.tudarmstadt.ukp.experiments.ek.de.tudarmstadt.ukp.experiments.ek.ubyfeat.extraction.
     * UbyRelationExtraction#dumpRelations(java.io.PrintWriter)
     */
    @Override
    public void dumpRelations(PrintWriter writer)
    {
        // TODO Auto-generated method stub

    }

    /*
     * (non-Javadoc)
     *
     * @see de.tudarmstadt.ukp.experiments.ek.de.tudarmstadt.ukp.experiments.ek.ubyfeat.extraction.
     * UbyRelationExtraction#dumpRelationsStatistics(java.io.PrintWriter)
     */
    @Override
    public void dumpRelationsStatistics(PrintWriter writer)
    {
        String lexiconName = "WordNet";
        Lexicon lex;
        try {
            lex = uby.getLexiconByName(lexiconName);
            Map<String, Integer> counts;
            Integer count;
            for (EPartOfSpeech pos : POSList) {
                System.out.println("*******************************************************");
                counts = new HashMap<String, Integer>();
                Iterator<LexicalEntry> lexicalEntryIterator = uby.getLexicalEntryIterator(pos, lex);
                while (lexicalEntryIterator.hasNext()) {
                    LexicalEntry lexicalEntry = lexicalEntryIterator.next();
                    String lemma = lexicalEntry.getLemmaForm();
                    log.info(lexicalEntry);
                    for (Sense sense : lexicalEntry.getSenses()) {

                        for (Triple triple : getSenseAxisRelations(sense, lemma, pos, lexiconName)) {
                            if (counts.containsKey(triple.getRelation().toString())) {
                                count = counts.get(triple.getRelation().toString());
                                counts.put(triple.getRelation().toString(), count + 1);
                            }
                            else {
                                counts.put(triple.getRelation().toString(), 1);
                            }
                        }

                    }
                }
                writer.println(pos + ":");
                for (Entry<String, Integer> entry : counts.entrySet()) {
                    writer.println(entry.getKey() + "\t" + entry.getValue());
                }
            }

        }
        catch (UbyInvalidArgumentException e) {

            e.printStackTrace();
        }
    }

    private List<Triple> getSenseAxisRelations(Sense sense, String lemma, EPartOfSpeech pos,
            String lexiconName)
    {
        // TODO Auto-generated method stub
        List<Triple> saxList = new ArrayList<Triple>();
        for (SenseAxis senseAxis : this.uby.getSenseAxisBySense(sense)) {
            Triple temp;
            if (senseAxis.getSenseOne() == null || senseAxis.getSenseOne().getId() == null
                    || senseAxis.getSenseTwo() == null || senseAxis.getSenseTwo().getId() == null) {
                continue;
            }
            else {
                Sense senseOne = senseAxis.getSenseOne();
                Sense senseTwo = senseAxis.getSenseTwo();
                Entity leftHandSide = new Entity(senseOne.getId(), EntityTypes.SENSE, lemma, pos,
                        lexiconName);
                String targetLemma = senseTwo.getLexicalEntry().getLemmaForm();
                // Be careful about POS
                Entity rightHandSide = new Entity(senseTwo.getId(), EntityTypes.SENSE, targetLemma,
                        pos, lexiconName);

                Relation relation = new Relation(senseAxis.getSenseAxisType().name(),
                        "SenseAxis");

                temp = new Triple(leftHandSide, rightHandSide, relation);

//                System.out.println(temp);
                // log.info(temp);
                saxList.add(temp);

            }
        }

        return saxList;
    }

    /**
     * @param args
     * @throws UbyInvalidArgumentException
     */
    public static void main(String[] args)
        throws UbyInvalidArgumentException
    {
        // TODO Auto-generated method stub
        DBConfig db = new DBConfig("localhost/uby_academic", "com.mysql.jdbc.Driver", "mysql",
                "root", "ehsanukp", false);
        SenseAxisRelationExtraction relExtractor = new SenseAxisRelationExtraction(db);

        PrintWriter writer = null;
        try {
            writer = new PrintWriter("./WN_axis.stat");
            relExtractor.dumpRelationsStatistics(writer);
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        finally {
            writer.close();
        }

    }

}
