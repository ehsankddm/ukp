package de.tudarmstadt.ukp.experiments.ek.de.tudarmstadt.ukp.experiments.ek.ubyfeat.extraction;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import de.tudarmstadt.ukp.lmf.exceptions.UbyInvalidArgumentException;
import de.tudarmstadt.ukp.lmf.model.core.LexicalEntry;
import de.tudarmstadt.ukp.lmf.model.core.Lexicon;
import de.tudarmstadt.ukp.lmf.model.enums.EPartOfSpeech;
import de.tudarmstadt.ukp.lmf.model.semantics.Synset;
import de.tudarmstadt.ukp.lmf.model.semantics.SynsetRelation;
import de.tudarmstadt.ukp.lmf.transform.DBConfig;

public class SynsetRelationExtraction
    extends UbyRelationExtraction
{
    private final Log log = LogFactory.getLog(SynsetRelationExtraction.class);

    public SynsetRelationExtraction(DBConfig db)
        throws Exception
    {
        super(db);

    }

    private void dumpSynsetRelations(Synset synset, String lemma, EPartOfSpeech pos,
            String lexName, PrintWriter writer)
    {

        for (SynsetRelation synsetRelation : synset.getSynsetRelations()) {
            synsetRelation.getFrequencies();
            if (synsetRelation.getSource() == null || synsetRelation.getSource().getId() == null
                    || synsetRelation.getTarget() == null
                    || synsetRelation.getTarget().getId() == null) {
                continue;
            }

            Entity leftHandSide = new Entity(synsetRelation.getSource().getId(),
                    EntityTypes.SYNSET, lemma, pos, lexName);
            String targetLemma = null;
            // Be careful about this POS
            if (synsetRelation.getTarget().getSenses().size() > 0) {
                targetLemma = synsetRelation.getTarget().getSenses().get(0).getLexicalEntry()
                        .getLemmaForm();
            }

            Entity rightHandSide = new Entity(synsetRelation.getTarget().getId(),
                    EntityTypes.SYNSET, targetLemma, pos, lexName);

            Relation relation = new Relation(synsetRelation.getRelType().name(),
                    synsetRelation.getRelName());

            Triple temp = new Triple(leftHandSide, rightHandSide, relation);

            // System.out.println(temp);
            // log.info(temp);
            // srList.add(temp);
            for (String rel : temp.generalizeTriple()) {
                writer.println(rel);
            }
            writer.flush();

        }

    }

    @Override
    public void dumpRelations(PrintWriter writer)
    {
        String lexiconName = "WordNet";
        Lexicon lex;
        try {
            lex = uby.getLexiconByName(lexiconName);
            for (EPartOfSpeech pos : POSList) {
                Iterator<LexicalEntry> lexicalEntryIterator = uby.getLexicalEntryIterator(pos, lex);
                while (lexicalEntryIterator.hasNext()) {
                    LexicalEntry lexicalEntry = lexicalEntryIterator.next();
                    String lemma = lexicalEntry.getLemmaForm();
                    log.info(lexicalEntry);
                    for (Synset synset : lexicalEntry.getSynsets()) {
                        log.info(synset);
                        dumpSynsetRelations(synset, lemma, pos, lexiconName, writer);

                    }
                }
            }

        }
        catch (UbyInvalidArgumentException e) {

            e.printStackTrace();
        }

    }

    @Override
    public void dumpRelationsStatistics(PrintWriter writer)
    {
        String lexiconName = "WordNet";
        Lexicon lex;
        try {
            lex = uby.getLexiconByName(lexiconName);
            Map<String, Integer> counts;
            //Map<String, Integer> countsR;
            Integer count;
            for (EPartOfSpeech pos : POSList) {
                System.out.println("*******************************************************");
                counts = new HashMap<String, Integer>();
                //countsR = new HashMap<String, Integer>();
                Iterator<LexicalEntry> lexicalEntryIterator = uby.getLexicalEntryIterator(pos, lex);
                while (lexicalEntryIterator.hasNext()) {
                    LexicalEntry lexicalEntry = lexicalEntryIterator.next();
                    String lemma = lexicalEntry.getLemmaForm();
                    log.info(lexicalEntry);
                    for (Synset synset : lexicalEntry.getSynsets()) {

                        for (Triple triple : getSynsetRelations(synset, lemma, pos, lexiconName)) {
                            count = counts.get(triple.getLeftHandSide().toString());
                            if (count!= null){
                                counts.put(triple.getLeftHandSide().toString(), count + 1);
                            }else {
                                counts.put(triple.getLeftHandSide().toString(), 1);
                            }

                        }

                    }
                }
                writer.println(pos + ":");
                for (Entry<String, Integer> entry : counts.entrySet()) {
                    writer.println(entry.getKey() + "\t" + entry.getValue());
                }
            }

        }
        catch (UbyInvalidArgumentException e) {

            e.printStackTrace();
        }

    }

    private List<Triple> getSynsetRelations(Synset synset, String lemma, EPartOfSpeech pos,
            String lexName)
    {
        List<Triple> srList = new ArrayList<Triple>();
        for (SynsetRelation synsetRelation : synset.getSynsetRelations()) {
            synsetRelation.getFrequencies();
            if (synsetRelation.getSource() == null || synsetRelation.getSource().getId() == null
                    || synsetRelation.getTarget() == null
                    || synsetRelation.getTarget().getId() == null) {
                continue;
            }

            // String targetID = synsetRelation.getTarget().getId();

            Entity leftHandSide = new Entity(synsetRelation.getSource().getId(),
                    EntityTypes.SYNSET, lemma, pos, lexName);
            String targetLemma = null;
            // Be careful about this POS
            if (synsetRelation.getTarget().getSenses().size() > 0) {
                targetLemma = synsetRelation.getTarget().getSenses().get(0).getLexicalEntry()
                        .getLemmaForm();

            }

            Entity rightHandSide = new Entity(synsetRelation.getTarget().getId(),
                    EntityTypes.SYNSET, targetLemma, pos, lexName);

            Relation relation = new Relation(synsetRelation.getRelType().name(),
                    synsetRelation.getRelName());

            Triple temp = new Triple(leftHandSide, rightHandSide, relation);

            // System.out.println(temp);
            // log.info(temp);
            srList.add(temp);

        }

        return srList;

    }

    /**
     * @param args
     * @throws Exception
     */
    public static void main(String[] args)
        throws Exception
    {
        DBConfig db = new DBConfig("localhost/uby_academic", "com.mysql.jdbc.Driver", "mysql",
                "root", "ehsanukp", false);
        SynsetRelationExtraction relExtractor = new SynsetRelationExtraction(db);

        PrintWriter writer = null;
        try {
            writer = new PrintWriter("./WN.stat");
            relExtractor.dumpRelationsStatistics(writer);
        }
        catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        finally {
            writer.close();
        }

    }
}
